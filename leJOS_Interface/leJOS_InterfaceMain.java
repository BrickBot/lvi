package leJOS_Interface;
/*
 * leJOS_InterfaceMain.java
 * Copyright (C) 2001 Andy Gombos
 * gombos_2000@yahoo.com
 * http://www.geocities.com/gombos_2000/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
import javax.swing.*;
import java.awt.Color;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.beans.*;

public class leJOS_InterfaceMain extends javax.swing.JFrame {

        /** Creates new form leJOS_InterfaceMain */
        public leJOS_InterfaceMain() {
                initComponents ();
                pack ();
                setVisible(true);
        }

        /** This method is called from within the constructor to
          * initialize the form.
          * WARNING: Do NOT modify this code. The content of this method is
          * always regenerated by the FormEditor.
          */
        private void initComponents () {//GEN-BEGIN:initComponents
                jMenuBar1 = new javax.swing.JMenuBar ();
                jMenu1 = new javax.swing.JMenu ();
                jMenuItem1 = new javax.swing.JMenuItem ();
                jMenuItem2 = new javax.swing.JMenuItem ();
                jMenuItem3 = new javax.swing.JMenuItem ();
                jMenuItem4 = new javax.swing.JMenuItem ();
                jMenuItem5 = new javax.swing.JMenuItem ();
                jMenuItem18 = new javax.swing.JMenuItem ();
                jSeparator1 = new javax.swing.JSeparator ();
                jMenuItem6 = new javax.swing.JMenuItem ();
                jMenu2 = new javax.swing.JMenu ();
                jMenuItem17 = new javax.swing.JMenuItem ();
                jMenuItem7 = new javax.swing.JMenuItem ();
                jMenuItem8 = new javax.swing.JMenuItem ();
                jMenuItem9 = new javax.swing.JMenuItem ();
                jMenu3 = new javax.swing.JMenu ();
                jMenuItem10 = new javax.swing.JMenuItem ();
                jMenuItem11 = new javax.swing.JMenuItem ();
                jMenuItem12 = new javax.swing.JMenuItem ();
                jMenuItem16 = new javax.swing.JMenuItem ();
                jSeparator2 = new javax.swing.JSeparator ();
                jMenuItem13 = new javax.swing.JMenuItem ();
                jMenu4 = new javax.swing.JMenu ();
                jMenuItem14 = new javax.swing.JMenuItem ();
                jMenuItem15 = new javax.swing.JMenuItem ();
                jDesktopPane1 = new javax.swing.JDesktopPane ();

                jMenu1.setText ("File");

                jMenuItem1.setText ("New");
                jMenuItem1.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem1ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem1);
                jMenuItem2.setText ("Open");
                jMenuItem2.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem2ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem2);
                jMenuItem3.setText ("Close");
                jMenuItem3.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem3ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem3);
                jMenuItem4.setText ("Save");
                jMenuItem4.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem4ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem4);
                jMenuItem5.setText ("Save As");
                jMenuItem5.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem5ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem5);

                jMenu1.add (jSeparator1);
                jMenuItem6.setText ("Exit");
                jMenuItem6.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem6ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu1.add (jMenuItem6);
                //add print listener -- send file to printer
                jMenuBar1.add (jMenu1);
                jMenu2.setText ("Edit");
                jMenu2.setEnabled (true);

                jMenuItem17.setText ("Undo");
                jMenuItem17.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem17ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu2.add (jMenuItem17);
                jMenuItem7.setText ("Cut");
                jMenuItem7.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem7ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu2.add (jMenuItem7);
                jMenuItem8.setText ("Copy");
                jMenuItem8.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem8ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu2.add (jMenuItem8);
                jMenuItem9.setText ("Paste");
                jMenuItem9.addActionListener (
                        new java.awt.event.ActionListener () {
                                                      public void actionPerformed (
                                                              java.awt.event.ActionEvent evt) {
                                                              jMenuItem9ActionPerformed (
                                                                      evt);
                                                      }
                                              }
                                             );

                jMenu2.add (jMenuItem9);
                jMenuBar1.add (jMenu2);
                jMenu3.setText ("Tools");

                jMenuItem10.setText ("Compile");
                jMenuItem10.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem10ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu3.add (jMenuItem10);
                jMenuItem11.setText ("Link and Download");
                jMenuItem11.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem11ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu3.add (jMenuItem11);
                jMenuItem16.setText ("Download Firmware");
                jMenuItem16.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem16ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu3.add (jMenuItem16);

                jMenu3.add (jSeparator2);
                jMenuItem13.setText ("Preferences");
                jMenuItem13.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem13ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu3.add (jMenuItem13);
                jMenuBar1.add (jMenu3);
                jMenu4.setText ("Help");

                jMenuItem14.setText ("Help");
                jMenuItem14.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem14ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu4.add (jMenuItem14);
                jMenuItem15.setText ("About");
                jMenuItem15.addActionListener (
                        new java.awt.event.ActionListener () {
                                                       public void actionPerformed (
                                                               java.awt.event.ActionEvent evt) {
                                                               jMenuItem15ActionPerformed (
                                                                       evt);
                                                       }
                                               }
                                              );

                jMenu4.add (jMenuItem15);
                jMenuBar1.add (jMenu4);
                addWindowListener (new java.awt.event.WindowAdapter () {
                                           public void windowClosing (
                                                   java.awt.event.WindowEvent evt) {
                                                   exitForm (evt);
                                           }
                                           public void windowOpened (
                                                   java.awt.event.WindowEvent evt) {
                                                   formWindowOpened (evt);
                                           }
                                   }
                                  );
                opt.addPropertyChangeListener(
                        new PropertyChangeListener () {
                                                      public void propertyChange(
                                                              PropertyChangeEvent pce) {
                                                              optionsChanged(
                                                                      pce);
                                                      }
                                              }
                                             );

                getContentPane ().add (jDesktopPane1,
                        java.awt.BorderLayout.CENTER);
                setJMenuBar (jMenuBar1);


                screenSize = java.awt.Toolkit.getDefaultToolkit().
                        getScreenSize();
                setSize (screenSize);
                jDesktopPane1.setPreferredSize(screenSize);
        }//GEN-END:initComponents

        private void formWindowOpened (java.awt.event.WindowEvent evt) {
                File[] openedFiles;
                int documentsOpened = 0;
                try {
                        //load options
                        FileInputStream optLoader = new FileInputStream(
                                System.getProperty("user.home") + 
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") + 
                                "options.properties");
                        ObjectInputStream streamLoader =
                                new ObjectInputStream(optLoader);
                        optionProps =
                                (Properties) streamLoader.readObject();
                        optionProps.load(optLoader);
                        //load files
                        FileInputStream filesLoader = new FileInputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "files.open");
                        ObjectInputStream fileStreamLoader =
                                new ObjectInputStream(filesLoader);
                        openedFiles =
                                (File[]) fileStreamLoader.readObject();
                        documentsOpened = loadDocuments(openedFiles);
                        //open shortcuts
                                                //load files
                        FileInputStream shortLoader = new FileInputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "lvi.shortcuts");
                        ObjectInputStream shortStreamLoader =
                                new ObjectInputStream(shortLoader);
                        shortcuts =
                                (String[] []) shortStreamLoader.readObject();

                } catch (IOException ioe) {
                        ie.InterfaceError(ioe.getMessage());
                }
                catch (ClassNotFoundException cnfe) {
                        ie.InterfaceError(cnfe.getMessage());
                }
                screenSize = new java.awt.Dimension( stringToInt(
                        optionProps.getProperty("ScreenSizeX")),
                        stringToInt(optionProps.getProperty("ScreenSizeY")));
                setSize (screenSize);
                setLocation(stringToInt(optionProps.getProperty("LocationX")), 
                        stringToInt(optionProps.getProperty("LocationY")));
                jDesktopPane1.setPreferredSize(screenSize);
                if (documentsOpened == 0) {
                        DocumentFrame newDocumentFrame =
                                new DocumentFrame();
                        openDocumentFrames.add(newDocumentFrame);
                        newDocumentFrame.addNewFrame(openDocumentFrames.size());
                        newDocumentFrame.setShortcuts(shortcuts);                                
                        jDesktopPane1.add(newDocumentFrame);
                        newDocumentFrame.setVisible(true);
                        try {
                                newDocumentFrame.setSelected(true);
                        } catch (java.beans.PropertyVetoException pve) {}
                }
                opt.setOptions(optionProps);
                opt.setShortcuts(shortcuts);
                opt.displayOptions();
                opt.decideOptions();
                SwingUtilities.updateComponentTreeUI(this);
                optionProps = opt.getOptions();
        }

        private void optionsChanged(PropertyChangeEvent pce) {
                if (pce.getPropertyName().equals("deskback")) {
                        jDesktopPane1.setBackground(
                                (Color) pce.getNewValue());
                }
                if (pce.getPropertyName().equals("textback")) {

                }
                if (pce.getPropertyName().equals("shortcut")) 
                {
                        shortcuts = (String [] [])pce.getNewValue();
                        DocumentFrame tmp;
                        for (int i=0;i<openDocumentFrames.size();i++)
                        {
                                tmp = (DocumentFrame) openDocumentFrames.get(i);
                                tmp.setShortcuts(shortcuts);
                        }
                }
        }
        private void jMenuItem15ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
                AboutDialog ad = new AboutDialog(this, true);
                ad.pack();
                ad.show();
        }//GEN-LAST:event_jMenuItem15ActionPerformed

        private void jMenuItem14ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
                // Add your handling code here:
                }//GEN-LAST:event_jMenuItem14ActionPerformed

                private void jMenuItem13ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
                opt.setOptions(optionProps);
                opt.setShortcuts(shortcuts);
                opt.displayOptions();
                opt.show();
                SwingUtilities.updateComponentTreeUI(this);
                optionProps = opt.getOptions();
        }//GEN-LAST:event_jMenuItem13ActionPerformed

        private void jMenuItem16ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
                String leJOSPath = optionProps.getProperty("leJOSHome");
                String rcxCom = optionProps.getProperty("RCXTTY");
                String DLFirmCmd[] = { leJOSPath +
                        System.getProperty("file.separator") + "bin" +
                        System.getProperty("file.separator") + "lejosfirmdl" };
                String envp[] = {"RCXTTY=" + rcxCom};
                ExternalAction(DLFirmCmd, envp);
        }//GEN-LAST:event_jMenuItem16ActionPerformed

        private void jMenuItem11ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
                //Link and Download
                int i;
                DocumentFrame tmpFrame = new DocumentFrame();
                int linkFrame = findSelectedFrame();
                tmpFrame =
                        (DocumentFrame) openDocumentFrames.get(linkFrame);
                File sourceFile = tmpFrame.getSourceFile();
                String pathToClass = sourceFile.getPath();
                String nameOfClass = sourceFile.getName();
                pathToClass = pathToClass.substring(0,
                        pathToClass.length() - nameOfClass.length()) +
                        System.getProperty("path.separator");
                nameOfClass = nameOfClass.substring(0,
                        nameOfClass.length() - 5);
                String leJOSHome = optionProps.getProperty("leJOSHome");
                String rcxCom = optionProps.getProperty("RCXTTY");
                String classpath = System.getProperty("sun.boot.class.path");
                String path = System.getProperty("java.library.path");
                if (path != null) {
                        path = path + System.getProperty("file.separator") +
                                System.getProperty("path.separator") +
                                leJOSHome +
                                System.getProperty("file.separator") +
                                "bin" +
                                System.getProperty("file.separator") +
                                leJOSHome +
                                System.getProperty("path.separator") +
                                "bin" +
                                System.getProperty("path.separator") +
                                System.getProperty("file.separator");
                } else {
                        path = leJOSHome +
                                System.getProperty("path.separator") +
                                "bin" +
                                System.getProperty("path.separator") +
                                System.getProperty("file.separator");
                }
                if (classpath != null) {
                        classpath = classpath +
                                System.getProperty("file.separator") +
                                System.getProperty("path.separator") +
                                pathToClass;
                } else {
                        classpath = pathToClass;
                }
                String LinkDLCommand[] = { leJOSHome +
                        System.getProperty("file.separator") + "bin" +
                        System.getProperty("file.separator") +
                        "lejos" , nameOfClass };
                String envp[] = { "RCXTTY=" + rcxCom ,
                "CLASSPATH=" + classpath, "PATH=" + path };
                ExternalAction(LinkDLCommand, envp);

        }//GEN-LAST:event_jMenuItem11ActionPerformed

        private void jMenuItem10ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
                //Compile
                String leJOSHome = optionProps.getProperty("leJOSHome");
                int compileFrame = findSelectedFrame();
                DocumentFrame tmpFrame =
                        (DocumentFrame) openDocumentFrames.get(
                        compileFrame);
                File sourceFile = tmpFrame.getSourceFile();
                String sourceString = sourceFile.getPath();
                String CompileCommand[] = {leJOSHome +
                        System.getProperty("file.separator") + "bin" +
                        System.getProperty("file.separator") + "lejosc",
                sourceString};
                ExternalAction(CompileCommand, null);
        }//GEN-LAST:event_jMenuItem10ActionPerformed

        private void jMenuItem9ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
                DocumentFrame paste = new DocumentFrame();
                int pasteFrame = findSelectedFrame();
                paste = (DocumentFrame) openDocumentFrames.get(pasteFrame);
                JEditorPane pasteArea = paste.getTextArea();
                pasteArea.paste();
        }//GEN-LAST:event_jMenuItem9ActionPerformed

        private void jMenuItem8ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
                DocumentFrame copy = new DocumentFrame();
                int copyFrame = findSelectedFrame();
                copy = (DocumentFrame) openDocumentFrames.get(copyFrame);
                JEditorPane copyArea = copy.getTextArea();
                copyArea.copy();
        }//GEN-LAST:event_jMenuItem8ActionPerformed

        private void jMenuItem7ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
                DocumentFrame cut = new DocumentFrame();
                int cutFrame = findSelectedFrame();
                cut = (DocumentFrame) openDocumentFrames.get(cutFrame);
                JEditorPane cutArea = cut.getTextArea();
                cutArea.cut();
        }//GEN-LAST:event_jMenuItem7ActionPerformed

        private void jMenuItem17ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
                //Undo
                DocumentFrame undo = new DocumentFrame();
                int undoFrame = findSelectedFrame();
                undo = (DocumentFrame) openDocumentFrames.get(undoFrame);
                undo.undoEdit();
        }//GEN-LAST:event_jMenuItem15ActionPerformed

        private void jMenuItem6ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
                try {
                        //write open files
                        File[] files = new File[openDocumentFrames.size()];
                        DocumentFrame tmp;
                        for (int a = 0; a < files.length; a++) {
                                        tmp = (DocumentFrame)
                                                openDocumentFrames.get(a);
                                        if (tmp.getSourceFile() != null)
                                        {
                                                files[a] = tmp.getSourceFile();
                                        }
                        }
                        FileOutputStream fileSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "files.open");
                        ObjectOutputStream fileSerial = new ObjectOutputStream(fileSaver);
                        fileSerial.writeObject(files);
                        //properties
                        screenSize = getSize();
                        optionProps = opt.getOptions();
                        optionProps.put("ScreenSizeX",
                                doubletoString(screenSize.getWidth()));
                        optionProps.put("ScreenSizeY",
                                doubletoString(screenSize.getHeight()));
                        FileOutputStream optionSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "options.properties");
                        ObjectOutputStream optionSerial =
                                new ObjectOutputStream(optionSaver);
                        optionSerial.writeObject(optionProps);
                        //write shortcuts
                        FileOutputStream shortSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "lvi.shortcuts");
                        ObjectOutputStream shortSerial = new ObjectOutputStream(shortSaver);
                        shortSerial.writeObject(shortcuts);                        
                } catch (FileNotFoundException fnfe) {
                        ie.InterfaceError(fnfe.getMessage());
                }
                catch (IOException ioe) {
                        ie.InterfaceError(ioe.getMessage());
                }
                System.exit (0);
        }//GEN-LAST:event_jMenuItem6ActionPerformed

        private void jMenuItem5ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
                int savingFrame;
                DocumentFrame tmpFrame;
                savingFrame = findSelectedFrame();
                tmpFrame = (DocumentFrame) openDocumentFrames.get(
                        savingFrame);
                JFileChooser SourceChooser = new JFileChooser();
                int scval = SourceChooser.showSaveDialog(this);
                if (scval == JFileChooser.APPROVE_OPTION) {
                        source = SourceChooser.getSelectedFile();
                }
                tmpFrame.saveFile(source);
                tmpFrame.setDocumentTitle(source.getName());
                tmpFrame.setSourceFile(source);
        }//GEN-LAST:event_jMenuItem5ActionPerformed

        private void jMenuItem4ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
                int savingFrame;
                DocumentFrame tmpFrame;
                savingFrame = findSelectedFrame();                
                tmpFrame = (DocumentFrame) openDocumentFrames.get(
                        savingFrame);
                if (tmpFrame.getSourceFile() == null)
                {
                JFileChooser SourceChooser = new JFileChooser();
                int scval = SourceChooser.showSaveDialog(this);
                if (scval == JFileChooser.APPROVE_OPTION) {
                        source = SourceChooser.getSelectedFile();
                }                        
                //set the source and title
                tmpFrame.saveFile(source);
                tmpFrame.setSourceFile(source);
                tmpFrame.setTitle(source.getName());
                }
                else {                        
                //already have a source and title
                source = tmpFrame.getSourceFile();
                tmpFrame.saveFile(source);
                tmpFrame.setSourceFile(source);
                }
        }//GEN-LAST:event_jMenuItem4ActionPerformed

        private void jMenuItem3ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
                DocumentFrame tmpFrame;
                int closingFrame = 0;
                closingFrame = findSelectedFrame();
                tmpFrame = (DocumentFrame) openDocumentFrames.get(
                        closingFrame);
                try {
                        tmpFrame.setClosed(true);
                } catch (java.beans.PropertyVetoException pve) {}
                tmpFrame = (DocumentFrame) openDocumentFrames.remove(
                        closingFrame);
                tmpFrame.setClosedFrame(openDocumentFrames.size());
        }//GEN-LAST:event_jMenuItem3ActionPerformed

        private void jMenuItem2ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
                DocumentFrame openedDocument = new DocumentFrame();
                openedDocument.openSavedDocument();
                openDocumentFrames.add(openedDocument);
                openedDocument.addNewFrame(openDocumentFrames.size());
                openedDocument.setShortcuts(shortcuts);
                jDesktopPane1.add(openedDocument);
                openedDocument.setVisible(true);
                try {
                        openedDocument.setSelected(true);
                } catch (java.beans.PropertyVetoException pve) {}
        }//GEN-LAST:event_jMenuItem2ActionPerformed

        private void jMenuItem1ActionPerformed (
                java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
                DocumentFrame newDocumentFrame = new DocumentFrame();
                openDocumentFrames.add(newDocumentFrame);
                newDocumentFrame.addNewFrame(openDocumentFrames.size());
                newDocumentFrame.setShortcuts(shortcuts);
                jDesktopPane1.add(newDocumentFrame);
                newDocumentFrame.setVisible(true);
                try {
                        newDocumentFrame.setSelected(true);
                } catch (java.beans.PropertyVetoException pve) {}
        }//GEN-LAST:event_jMenuItem1ActionPerformed

        /** Exit the Application */
        private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
                try {
                        //write open files
                        File[] files = new File[openDocumentFrames.size()];
                        DocumentFrame tmp;
                        for (int a = 0; a < files.length; a++) {
                                        tmp = (DocumentFrame)
                                                openDocumentFrames.get(a);
                                        if (tmp.getSourceFile() != null)
                                        {
                                                files[a] = tmp.getSourceFile();
                                        }
                        }
                        FileOutputStream fileSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "files.open");
                        ObjectOutputStream fileSerial = new ObjectOutputStream(fileSaver);
                        fileSerial.writeObject(files);
                        //properties
                        screenSize = getSize();
                        optionProps = opt.getOptions();
                        optionProps.put("ScreenSizeX",
                                doubletoString(screenSize.getWidth()));
                        optionProps.put("ScreenSizeY",
                                doubletoString(screenSize.getHeight()));
                        FileOutputStream optionSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "options.properties");
                        ObjectOutputStream optionSerial =
                                new ObjectOutputStream(optionSaver);
                        optionSerial.writeObject(optionProps);
                        //write shortcuts
                        FileOutputStream shortSaver = new FileOutputStream(
                                System.getProperty("user.home") +
                                System.getProperty("file.separator") + ".lvi" + System.getProperty("file.separator") +
                                "lvi.shortcuts");
                        ObjectOutputStream shortSerial = new ObjectOutputStream(shortSaver);
                        shortSerial.writeObject(shortcuts);                        
                } catch (FileNotFoundException fnfe) {
                        ie.InterfaceError(fnfe.getMessage());
                }
                catch (IOException ioe) {
                        ie.InterfaceError(ioe.getMessage());
                }
                System.exit (0);
        }//GEN-LAST:event_exitForm

        /**
        * @param args the command line arguments
        */
        public static void main (String args[]) {
                new leJOS_InterfaceMain ().show ();
        }
        private int loadDocuments(File[] openedFiles) {
                DocumentFrame frame;
                int loaded = 0;
                for (int i = 1; i < openedFiles.length; i++) {
                        if (openedFiles[i] != null) {
                                frame = new DocumentFrame();
                                openDocumentFrames.add(frame);
                                if (frame.openDocument(openedFiles[i])) {
                                        //Loaded successfully
                                        frame.setSourceFile(openedFiles[i]);
                                        frame.setDocumentTitle(openedFiles[i].getName());
                                        frame.addNewFrame(openDocumentFrames.size());
                                        jDesktopPane1.add(frame);
                                        frame.setVisible(true);
                                        try {
                                                frame.setSelected(true);                                                
                                             } 
                                   catch (java.beans.PropertyVetoException pve) {}
                                        loaded++;
                                } 
                                else {
                                        ie.InterfaceError(
                                                "Error loading document: " +
                                                openedFiles[i]);
                                        loaded--;
                                }
                        } else {
                                ie.InterfaceError("Document was Null");
                        }
                }
                return Math.abs(loaded);
        }

        public void ExternalAction(String cmd[], String envp[]) {
                int len;
                byte buffer[] = new byte[1000];
                try {
                        Process external =
                                Runtime.getRuntime().exec(cmd, envp);
                        InputStream ees = external.getErrorStream();
                        try {
                                while ((len = ees.read(buffer)) != -1) {
                                        String eo = new String (buffer, 0,
                                                len);
                                        System.out.println(eo);
                                }
                                external.waitFor();
                        } catch (EOFException eofe) {
                                ie.InterfaceError(eofe.getMessage());
                        }
                        catch (IOException ioe) {
                                ie.InterfaceError(ioe.getMessage());
                        }
                        catch (InterruptedException iee) {
                                ie.InterfaceError(iee.getMessage());
                        }
                } catch (IOException ioe) {
                        ie.InterfaceError(ioe.getMessage());
                }
        }


        public int findSelectedFrame() {
                int i;
                int selectedFrame = 0;
                DocumentFrame tmpFrame;
                DocumentFrame openDocumentArray [] =
                        new DocumentFrame[openDocumentFrames.size()];
                try {
                        openDocumentArray = (DocumentFrame[])
                                openDocumentFrames.toArray(
                                openDocumentArray);
                } catch (ArrayStoreException ase) {}
                for (i = 0; i < openDocumentFrames.size(); i++) {
                        tmpFrame = openDocumentArray[i];

                        if (tmpFrame.isSelected() == true) {
                                selectedFrame = i;
                        }
                }
                return selectedFrame;
        }
        public int stringToInt(String num) {
                try {
                        Integer inum = new Integer(num);
                        int intnum = inum.intValue();
                        return intnum;
                } catch (NumberFormatException nfe) {
                        System.out.println(nfe.getMessage());
                        return 0;
                }
        }
        public String doubletoString (double dnum) {
                try {
                        int num = (int) dnum;
                        Integer inum = new Integer(num);
                        String snum =
                                inum.toString((int) inum.doubleValue());
                        return snum;
                } catch (NumberFormatException nfe) {
                        System.out.println(nfe.getMessage());
                        return null;
                }
        }
        // Variables declaration - do not modify
        private javax.swing.JMenuBar jMenuBar1;
        private javax.swing.JMenu jMenu1;
        private javax.swing.JMenuItem jMenuItem1;
        private javax.swing.JMenuItem jMenuItem2;
        private javax.swing.JMenuItem jMenuItem3;
        private javax.swing.JMenuItem jMenuItem4;
        private javax.swing.JMenuItem jMenuItem5;
        private javax.swing.JMenuItem jMenuItem18;
        private javax.swing.JSeparator jSeparator1;
        private javax.swing.JMenuItem jMenuItem6;
        private javax.swing.JMenu jMenu2;
        private javax.swing.JMenuItem jMenuItem17;
        private javax.swing.JMenuItem jMenuItem7;
        private javax.swing.JMenuItem jMenuItem8;
        private javax.swing.JMenuItem jMenuItem9;
        private javax.swing.JMenu jMenu3;
        private javax.swing.JMenuItem jMenuItem10;
        private javax.swing.JMenuItem jMenuItem11;
        private javax.swing.JMenuItem jMenuItem12;
        private javax.swing.JMenuItem jMenuItem16;
        private javax.swing.JSeparator jSeparator2;
        private javax.swing.JMenuItem jMenuItem13;
        private javax.swing.JMenu jMenu4;
        private javax.swing.JMenuItem jMenuItem14;
        private javax.swing.JMenuItem jMenuItem15;
        private JDesktopPane jDesktopPane1;
        private ArrayList openDocumentFrames = new ArrayList(5);
        private JEditorPane docText;
        private File source;
        private InterfaceErrors ie = new InterfaceErrors();
        private String error[];
        private java.util.Properties optionProps =
                new java.util.Properties();
        private OptionFrame opt = new OptionFrame(this, true);
        private java.awt.Dimension screenSize;
        private String [] [] shortcuts;
}

